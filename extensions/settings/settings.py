import disnake
from disnake.ext import commands
import datetime

from sqlalchemy import select, delete, insert, update
from sqlalchemy import and_
from sqlalchemy import insert, text
from sqlalchemy import update, ARRAY
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.dialects.postgresql import ARRAY

from core.checker import *
from core.vars import *
from core.models import *


class SettingsButtons(disnake.ui.View):
    def __init__(self, bot, buttonAuthor: disnake.Member):
        super().__init__(timeout=60)
        self.bot = bot
        self.buttonAuthor = buttonAuthor

    async def interaction_check(self, interaction: disnake.Interaction):
        if interaction.author.id != self.buttonAuthor.id:
            embed = await accessDeniedButton(self.buttonAuthor)
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return False
        return True

    @disnake.ui.button(
        label="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
        style=disnake.ButtonStyle.secondary,
        emoji="üîä",
        row=1,
    )
    async def privateChannelsSetup(
        self, button: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        category = await interaction.guild.create_category(
            "–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", position=0
        )
        main_channel = await interaction.guild.create_voice_channel(
            "[‚ûï] –°–æ–∑–¥–∞—Ç—å", category=category
        )
        settings_channel = await interaction.guild.create_text_channel(
            "‚öô‚îÇ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞-–∫–æ–º–Ω–∞—Ç—ã", category=category
        )
        everyone = interaction.guild.default_role

        await main_channel.set_permissions(
            everyone,
            speak=False,
        )
        await settings_channel.set_permissions(
            everyone,
            read_messages=True,
            use_slash_commands=True,
            create_private_threads=False,
            create_public_threads=False,
            read_message_history=True,
        )

        await database(interaction.author)

        async with AsyncSession(engine) as session:
            channel_db = await session.scalar(
                select(Guilds.p_channel_ids).where(
                    Guilds.guild_id == interaction.guild.id
                )
            )

        channel_db.append(main_channel.id)

        async with AsyncSession(engine) as session:
            await session.execute(
                update(Guilds)
                .where(Guilds.guild_id == interaction.guild.id)
                .values(
                    p_channel_ids=text(
                        f"array_append({Guilds.p_channel_ids}, :channel_id\:\:bigint)"
                    )
                ),
                {"channel_id": main_channel.id},
            )
            await session.commit()

        embed = disnake.Embed(
            title="–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
            color=EmbedColor.MAIN_COLOR.value,
        )
        embed.add_field(
            name="> –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:",
            value=f"{main_channel.jump_url} \n" f"{settings_channel.jump_url}",
            inline=True,
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @disnake.ui.button(
        label="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        style=disnake.ButtonStyle.secondary,
        emoji="üìä",
        row=1,
    )
    async def voiceStatsSetup(
        self, button: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer()

        everyone = interaction.guild.default_role
        members = len(interaction.guild.members)
        boosts = interaction.guild.premium_subscription_count
        date = datetime.datetime.now().strftime("%d-–æ–µ %B, %A")

        voice_members = 0
        for x in interaction.guild.voice_channels + interaction.guild.stage_channels:
            voice_members += len(x.members)

        category = await interaction.guild.create_category("üìä | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        members_channel = await interaction.guild.create_voice_channel(
            f"üë•‚îÇ{members:,}", category=category, position=0
        )
        boosts_channel = await interaction.guild.create_voice_channel(
            f"üöÄ‚îÇ{boosts}", category=category
        )
        voice_members_channel = await interaction.guild.create_voice_channel(
            f"üé§‚îÇ{voice_members}", category=category
        )
        date_channel = await interaction.guild.create_voice_channel(
            f"üìÖ‚îÇ{date}", category=category
        )

        async with AsyncSession(engine) as session:
            await session.execute(
                update(Guilds)
                .where(Guilds.guild_id == interaction.guild.id)
                .values(
                    member_stats_channel_id=members_channel.id,
                    boosts_stats_channel_id=boosts_channel.id,
                    voice_members_channel_id=voice_members_channel.id,
                    date_channel_id=date_channel.id,
                )
            )
            await session.commit()

        await members_channel.set_permissions(everyone, speak=False, connect=False)
        await boosts_channel.set_permissions(everyone, speak=False, connect=False)
        await voice_members_channel.set_permissions(
            everyone, speak=False, connect=False
        )
        await date_channel.set_permissions(everyone, speak=False, connect=False)

        embed = disnake.Embed(
            title="–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–Ω–∞–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            description="",
            color=EmbedColor.MAIN_COLOR.value,
        )
        embed.add_field(
            name="–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            value=f"{members_channel.jump_url} \n"
            f"{boosts_channel.jump_url} \n"
            f"{voice_members_channel.jump_url} \n"
            f"{date_channel.jump_url}",
            inline=True,
        )
        await interaction.edit_original_response(embed=embed)

    @disnake.ui.button(
        label="–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–ø–æ—Ä—Ç–æ–≤",
        style=disnake.ButtonStyle.secondary,
        emoji="‚≠ï",
        row=2,
    )
    async def reportSystemSetup(
        self, button: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        category = await interaction.guild.create_category("‚≠ï‚îÇReport System")
        channel = await category.create_text_channel("‚õîÔ∏è‚îÇreport")
        async with AsyncSession(engine) as session:
            db_guilds = await session.scalar(
                select(Guilds).where(Guilds.guild_id == interaction.guild.id)
            )

        if db_guilds.report_channel_id is not None:
            return

        async with AsyncSession(engine) as session:
            await session.execute(
                update(Guilds)
                .where(Guilds.guild_id == interaction.guild.id)
                .values(report_channel_id=channel.id)
            )
            await session.commit()

        embed = disnake.Embed(
            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", color=EmbedColor.MAIN_COLOR.value
        )
        embed.add_field(
            name="–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
            value="–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ.",
            inline=False,
        )
        embed.add_field(
            name="–ö–∞–∫ –∑–∞–∫—Ä—ã—Ç—å –∂–∞–ª–æ–±—É?",
            value="–ñ–∞–ª–æ–±—É –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—É—é –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º.",
        )
        message = await channel.send(
            embed=embed,
            components=[
                disnake.ui.Button(
                    label="–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–∫–µ—Ç",
                    custom_id="report_button_text",
                    emoji="üí¨",
                    row=1,
                    style=disnake.ButtonStyle.secondary,
                ),
                disnake.ui.Button(
                    label="–ì–æ–ª–æ—Å–æ–≤–æ–π —Ç–∏–∫–µ—Ç",
                    custom_id="report_button_voice",
                    emoji="üîä",
                    row=1,
                    style=disnake.ButtonStyle.secondary,
                ),
            ],
        )
        async with AsyncSession(engine) as session:
            await session.execute(
                update(Guilds)
                .where(Guilds.guild_id == interaction.guild.id)
                .values(report_message_id=message.id)
            )
            await session.commit()


class Settings(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
    async def settings(self, interaction: disnake.GuildCommandInteraction):
        if interaction.author.bot or not interaction.guild:
            return

        db = await database(interaction.author)

        if not list(
            set(db[1].admin_roles_ids).intersection(
                set([ids.id for ids in interaction.author.roles])
            )
        ):
            embed = await accessDeniedCustom("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π-–∞–¥–º–∏–Ω —Ä–æ–ª–∏")
            embed.add_field(
                name="> –°–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è",
                value=f"```- –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω-—Ä–æ–ª—å \n"
                f"- –£–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-—Ä–æ–ª–∏ –Ω–∞ [—Å–∞–π—Ç–µ]{'https://discord.gg'} –≤ —Ä–∞–∑–¥–µ–ª–∞ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', "
                f"–µ—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/–≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏```",
                inline=False,
            )
            await interaction.send(embed=embed, ephemeral=True, delete_after=15)
            return

        embed = disnake.Embed(
            title="–í–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            description="",
            colour=EmbedColor.MAIN_COLOR.value,
        )

        await interaction.send(
            embed=embed, view=SettingsButtons(self.bot, interaction.author)
        )


def setup(bot):
    bot.add_cog(Settings(bot))
