import disnake
from disnake import TextInputStyle, Embed, SelectOption, MessageInteraction, ModalInteraction
from disnake.ui import StringSelect, TextInput
from disnake.ext import commands

from core.checker import *
from core.vars import *
from core.models import *


class VoiceSettings(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(description="–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º")
    async def voice(self, interaction: disnake.UserCommandInteraction):
        author = interaction.author
        if interaction.author.bot or not interaction.guild:
            return

        user_settngs = await database(author)

        if await private_channel_checker(author, user_settngs, interaction) is False:
            return

        embed = Embed(
            title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π",
            description="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä",
            color=EmbedColor.MAIN_COLOR.value,
        )

        await interaction.response.send_message(
            embed=embed,
            components=StringSelect(
                options=[
                    SelectOption(value="v_change_name", label=f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", emoji="üìù"),
                    SelectOption(value="v_set_users_limit", label=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç", emoji="üî†"),
                    SelectOption(value="v_open", label=f"–û—Ç–∫—Ä—ã—Ç—å", emoji="üîì"),
                    SelectOption(value="v_close", label=f"–ó–∞–∫—Ä—ã—Ç—å", emoji="üîí"),
                    SelectOption(value="v_kick", label=f"–í—ã–≥–Ω–∞—Ç—å", emoji="üë†"),
                ]
            ),
            ephemeral=True,
            delete_after=300
        )


def setup(bot):
    bot.add_cog(VoiceSettings(bot))


class VKickSelect(disnake.ui.StringSelect):
    def __init__(self, members):
        self.members = members
        options = []
        for member in self.members:
            options.append(
                SelectOption(
                    value=f"{member.id}",
                    label=f"{member.name}",
                )
            )

        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞(–æ–≤)",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        for m_v_kick in [self.values[0]]:
            members = "".join(m_v_kick)

            author = interaction.author
            user_settngs = await database(author)

            try:
                m_v_kick = int(m_v_kick)
            except ValueError:
                embed = await accessDeniedCustom("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                await interaction.send(embed=embed, ephemeral=True, delete_after=15)
                return

            member = interaction.guild.get_member(m_v_kick)

            if author == member:
                embed = await accessDeniedCustom("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å —Å–µ–±—è")
                await interaction.send(embed=embed, ephemeral=True, delete_after=15)
                return

            if await private_channel_checker(author, user_settngs, interaction) is False:
                return

            if member not in author.voice.channel.members:
                embed = await accessDeniedCustom("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ")
                await interaction.send(embed=embed, ephemeral=True, delete_after=15)
                return

            await author.voice.channel.set_permissions(member, connect=False)
            await member.move_to(None)

        embed = Embed(
            title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π",
            description=f"<@!{members}> –∏–∑–≥–æ–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ <#{author.voice.channel.id}>",
            color=EmbedColor.PCHANNEL_SETTINGS.value,
        )
        embed.add_field(
            name=f"{EmbedEmoji.ACCESS_ALLOWED.value} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–≥–Ω–∞–Ω",
            value=f"**<@!{members}>** –∏–∑–≥–Ω–∞–Ω",
            inline=False,
        )
        await interaction.send(embed=embed, ephemeral=True, delete_after=15)
        return
